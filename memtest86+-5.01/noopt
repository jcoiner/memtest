
block_move.o:     file format elf32-i386


Disassembly of section .text:

00000000 <block_move>:
   0:	f3 0f 1e fb          	endbr32 
   4:	55                   	push   %ebp
   5:	89 e5                	mov    %esp,%ebp
   7:	53                   	push   %ebx
   8:	83 ec 14             	sub    $0x14,%esp
   b:	e8 fc ff ff ff       	call   c <block_move+0xc>
			c: R_386_PC32	__x86.get_pc_thunk.bx
  10:	81 c3 02 00 00 00    	add    $0x2,%ebx
			12: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
  16:	8b 45 08             	mov    0x8(%ebp),%eax
  19:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1c:	8b 45 0c             	mov    0xc(%ebp),%eax
  1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  22:	83 ec 04             	sub    $0x4,%esp
  25:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			27: R_386_GOT32X	block_move_move
  2b:	50                   	push   %eax
  2c:	ff 75 0c             	pushl  0xc(%ebp)
  2f:	8d 45 f0             	lea    -0x10(%ebp),%eax
  32:	50                   	push   %eax
  33:	e8 fc ff ff ff       	call   34 <block_move+0x34>
			34: R_386_PLT32	sliced_foreach_segment
  38:	83 c4 10             	add    $0x10,%esp
  3b:	e8 fc ff ff ff       	call   3c <block_move+0x3c>
			3c: R_386_PLT32	s_barrier
  40:	90                   	nop
  41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  44:	c9                   	leave  
  45:	c3                   	ret    
  46:	eb 38                	jmp    80 <fooff>
  48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  4f:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  5d:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  64:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  6b:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  72:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

00000080 <fooff>:
  80:	f3 0f 1e fb          	endbr32 
  84:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.bx:

00000000 <__x86.get_pc_thunk.bx>:
   0:	8b 1c 24             	mov    (%esp),%ebx
   3:	c3                   	ret    
